From 88579496a75c61281bf85b9e99e7a1cb1056445b Mon Sep 17 00:00:00 2001
From: Deividas P <ngivingup@gmail.com>
Date: Thu, 31 Dec 2020 16:46:52 +0100
Subject: [PATCH] Nintendo Nunchuk controller driver.

Squashed commit of the following:

commit 5003324c70f0740a2dd6d87fa67a937fbc4041fa
Author: Deividas P <ngivingup@gmail.com>
Date:   Thu Dec 31 16:45:11 2020 +0100

    Nintendo Nunchuk controller driver exposed to input subsystem.

    Signed-off-by: Deividas P <ngivingup@gmail.com>

commit dcd3c6fd13eeed8f25e1ee3f7fa34844f2928a99
Author: Deividas P <ngivingup@gmail.com>
Date:   Wed Dec 30 21:51:18 2020 +0100

    Proper DT for using Nunchuck controller on i2c1.

    Signed-off-by: Deividas P <ngivingup@gmail.com>

commit 0787f188e69762f2eef8a3ca3961132681803bbc
Author: Deividas P <ngivingup@gmail.com>
Date:   Wed Dec 30 19:10:30 2020 +0100

    Added pinmuxing for i2c1 in DT.

    Signed-off-by: Deividas P <ngivingup@gmail.com>

commit 20d71a865fba8b9d59aaf068bc73882ba402144d
Author: Deividas P <ngivingup@gmail.com>
Date:   Wed Dec 30 18:08:58 2020 +0100

    Placeholder driver for I2C Nintendo Nunchuk controller.

    Signed-off-by: Deividas P <ngivingup@gmail.com>

Signed-off-by: Deividas P <ngivingup@gmail.com>
---
 arch/arm/boot/dts/Makefile                   |   1 +
 arch/arm/boot/dts/am335x-customboneblack.dts |  25 ++++
 drivers/input/misc/Kconfig                   |   9 ++
 drivers/input/misc/Makefile                  |   1 +
 drivers/input/misc/nunchuk.c                 | 149 +++++++++++++++++++
 5 files changed, 185 insertions(+)
 create mode 100644 arch/arm/boot/dts/am335x-customboneblack.dts
 create mode 100644 drivers/input/misc/nunchuk.c

diff --git a/arch/arm/boot/dts/Makefile b/arch/arm/boot/dts/Makefile
index 4572db3fa5ae..0d619ec0ea6d 100644
--- a/arch/arm/boot/dts/Makefile
+++ b/arch/arm/boot/dts/Makefile
@@ -788,6 +788,7 @@ dtb-$(CONFIG_SOC_AM33XX) += \
 	am335x-bone.dtb \
 	am335x-boneblack.dtb \
 	am335x-boneblack-wireless.dtb \
+	am335x-customboneblack.dtb \
 	am335x-boneblue.dtb \
 	am335x-bonegreen.dtb \
 	am335x-bonegreen-wireless.dtb \
diff --git a/arch/arm/boot/dts/am335x-customboneblack.dts b/arch/arm/boot/dts/am335x-customboneblack.dts
new file mode 100644
index 000000000000..fb45f3a04375
--- /dev/null
+++ b/arch/arm/boot/dts/am335x-customboneblack.dts
@@ -0,0 +1,25 @@
+/dts-v1/;
+
+#include "am335x-boneblack.dts"
+
+&am33xx_pinmux {
+	i2c1_pins: pinmux_i2c1_pins {
+		pinctrl-single,pins = <
+			AM33XX_PADCONF(AM335X_PIN_SPI0_D1, PIN_INPUT_PULLUP, MUX_MODE2)		/* spi0_d1.i2c1_sda */
+			AM33XX_PADCONF(AM335X_PIN_SPI0_CS0, PIN_INPUT_PULLUP, MUX_MODE2)	/* spi0_cs0.i2c1_scl */
+		>;
+	};
+};
+
+&i2c1 {
+	pinctrl-names ="default";
+	pinctrl-0=<&i2c1_pins>;
+
+	status = "okay";
+	clock-frequency = <100000>;
+	
+	nunchuk: nunchuk@52 {
+		compatible = "nintendo,nunchuk";
+		reg = <0x52>;
+	};
+};
diff --git a/drivers/input/misc/Kconfig b/drivers/input/misc/Kconfig
index 362e8a01980c..99c9160b354f 100644
--- a/drivers/input/misc/Kconfig
+++ b/drivers/input/misc/Kconfig
@@ -869,4 +869,13 @@ config INPUT_STPMIC1_ONKEY
 	  To compile this driver as a module, choose M here: the
 	  module will be called stpmic1_onkey.
 
+config INPUT_NUNCHUK
+	tristate "Nintendo nunchuk support"
+	depends on INPUT && I2C
+	help
+	  Say Y to enable support of Nintendo Nunchuks (and rip-offs).	
+
+	  To compile this driver as a module, choose M here: the
+	  module will be called nunchuk_i2c.
+
 endif
diff --git a/drivers/input/misc/Makefile b/drivers/input/misc/Makefile
index a48e5f2d859d..1a9bac804c90 100644
--- a/drivers/input/misc/Makefile
+++ b/drivers/input/misc/Makefile
@@ -84,4 +84,5 @@ obj-$(CONFIG_INPUT_WM831X_ON)		+= wm831x-on.o
 obj-$(CONFIG_INPUT_XEN_KBDDEV_FRONTEND)	+= xen-kbdfront.o
 obj-$(CONFIG_INPUT_YEALINK)		+= yealink.o
 obj-$(CONFIG_INPUT_IDEAPAD_SLIDEBAR)	+= ideapad_slidebar.o
+obj-$(CONFIG_INPUT_NUNCHUK)		+= nunchuk.o
 
diff --git a/drivers/input/misc/nunchuk.c b/drivers/input/misc/nunchuk.c
new file mode 100644
index 000000000000..8d9f91354d6c
--- /dev/null
+++ b/drivers/input/misc/nunchuk.c
@@ -0,0 +1,149 @@
+// SPDX-License-Identifier: GPL-2.0
+#include <linux/init.h>
+#include <linux/delay.h>
+#include <linux/module.h>
+#include <linux/i2c.h>
+#include <linux/input.h>
+
+#define READ_REGISTER_COUNT 6
+#define READ_REGISTERS_CMD 0
+#define MIN_SLEEP_RANGE 10000
+#define MAX_SLEEP_RANGE 20000
+
+struct nunchuk_dev {
+	struct i2c_client *i2c_client;
+};
+
+static const struct of_device_id nunchuck_of_match[] = {
+	{ .compatible = "nintendo,nunchuk" },
+	{}
+};
+MODULE_DEVICE_TABLE(of, nunchuck_of_match);
+
+static int nunchuk_read_registers(struct i2c_client *client,
+				  unsigned char buf[READ_REGISTER_COUNT])
+{
+	int ret;
+	unsigned char cmd;
+
+	usleep_range(MIN_SLEEP_RANGE, MAX_SLEEP_RANGE);
+	cmd = READ_REGISTERS_CMD;
+	ret = i2c_master_send(client, &cmd, 1);
+	if (ret != 1)
+		return ret;
+
+	usleep_range(MIN_SLEEP_RANGE, MAX_SLEEP_RANGE);
+	return i2c_master_recv(client, buf, READ_REGISTER_COUNT);
+}
+
+static void nunchuk_poll(struct input_dev *input)
+{
+	int ret, z_pressed, c_pressed, x, y;
+	unsigned char buf[6];
+	struct nunchuk_dev *nunchuk = input_get_drvdata(input);
+
+	ret = nunchuk_read_registers(nunchuk->i2c_client, buf);
+	if (ret != READ_REGISTER_COUNT) {
+		pr_info("%s: read fail, ret=%d\n", __func__, ret);
+		return;
+	}
+
+	z_pressed = !(buf[5] & 1);
+	c_pressed = !(buf[5] & (1 << 1));
+	x = buf[0];
+	y = buf[1];
+
+	input_event(input, EV_KEY, BTN_Z, z_pressed);
+	input_event(input, EV_KEY, BTN_C, c_pressed);
+	input_event(input, EV_ABS, ABS_X, x);
+	input_event(input, EV_ABS, ABS_Y, y);
+	input_sync(input);
+}
+
+static int nunchuk_probe(struct i2c_client *client)
+{
+	int ret;
+	unsigned char buf[2];
+	struct input_dev *input;
+	struct nunchuk_dev *nunchuk;
+
+	buf[0] = 0xf0;
+	buf[1] = 0x55;
+	ret = i2c_master_send(client, buf, 2);
+	if (ret != 2) {
+		pr_err("Init failed, ret=%d\n", ret);
+		return ret;
+	}
+	udelay(1000);
+
+	buf[0] = 0xfb;
+	buf[1] = 0x00;
+	ret = i2c_master_send(client, buf, 2);
+	if (ret != 2) {
+		pr_err("Init failed, ret=%d\n", ret);
+		return ret;
+	}
+
+	input = devm_input_allocate_device(&client->dev);
+	if (!input)
+		return -ENOMEM;
+
+	input->name = "Wii Nunchuk";
+	input->id.bustype = BUS_I2C;
+
+	set_bit(EV_KEY, input->evbit);
+	set_bit(BTN_C, input->keybit);
+	set_bit(BTN_Z, input->keybit);
+	set_bit(EV_ABS, input->evbit);
+	set_bit(ABS_X, input->absbit);
+	set_bit(ABS_Y, input->absbit);
+	input_set_abs_params(input, ABS_X, 30, 220, 4, 8);
+	input_set_abs_params(input, ABS_Y, 40, 200, 4, 8);
+
+	/* Classic buttons */
+	set_bit(BTN_TL, input->keybit);
+	set_bit(BTN_SELECT, input->keybit);
+	set_bit(BTN_MODE, input->keybit);
+	set_bit(BTN_START, input->keybit);
+	set_bit(BTN_TR, input->keybit);
+	set_bit(BTN_TL2, input->keybit);
+	set_bit(BTN_B, input->keybit);
+	set_bit(BTN_Y, input->keybit);
+	set_bit(BTN_A, input->keybit);
+	set_bit(BTN_X, input->keybit);
+	set_bit(BTN_TR2, input->keybit);
+
+	nunchuk = devm_kzalloc(&client->dev, sizeof(struct nunchuk_dev),
+			       GFP_KERNEL);
+	if (!nunchuk)
+		return -ENOMEM;
+	nunchuk->i2c_client = client;
+	input_set_drvdata(input, nunchuk);
+
+	ret = input_setup_polling(input, nunchuk_poll);
+	if (ret)
+		return ret;
+	input_set_poll_interval(input, 50);
+
+	ret = input_register_device(input);
+	if (ret)
+		return ret;
+
+	return 0;
+}
+
+static int nunchuck_remove(struct i2c_client *client)
+{
+	return 0;
+}
+
+static struct i2c_driver nunchuk_driver = {
+	.probe_new = nunchuk_probe,
+	.remove = nunchuck_remove,
+	.driver = { .name = "nunchuk_i2c", .of_match_table = nunchuck_of_match }
+};
+module_i2c_driver(nunchuk_driver);
+
+MODULE_LICENSE("GPL");
+MODULE_DESCRIPTION("Nintendo Nunchuk controller driver");
+MODULE_AUTHOR("Deividas Puplauskas");
-- 
2.17.1

